import{_ as e,c as n,o as t,b as o}from"./chunks/framework.ZWVK1dfd.js";const m=JSON.parse('{"title":"Custom Elements API","description":"","frontmatter":{},"headers":[{"level":2,"title":"defineCustomElement()","slug":"definecustomelement","link":"#definecustomelement","children":[]},{"level":2,"title":"useHost()","slug":"usehost","link":"#usehost","children":[]},{"level":2,"title":"useShadowRoot()","slug":"useshadowroot","link":"#useshadowroot","children":[]},{"level":2,"title":"this.$host","slug":"this-host","link":"#this-host","children":[]}],"relativePath":"api/custom-elements.md","filePath":"api/custom-elements.md"}'),a={name:"api/custom-elements.md"};function l(p,s,c,r,i,u){return t(),n("div",null,[...s[0]||(s[0]=[o(`<h1 id="custom-elements-api" tabindex="-1">Custom Elements API <a class="header-anchor" href="#custom-elements-api" aria-label="Permalink to &quot;Custom Elements API {#custom-elements-api}&quot;">​</a></h1><h2 id="definecustomelement" tabindex="-1">defineCustomElement() <a class="header-anchor" href="#definecustomelement" aria-label="Permalink to &quot;defineCustomElement() {#definecustomelement}&quot;">​</a></h2><p>This method accepts the same argument as <a href="#definecomponent"><code>defineComponent</code></a>, but instead returns a native <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements" target="_blank" rel="noreferrer">Custom Element</a> class constructor.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> defineCustomElement</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#FFAB70;">  component</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#F97583;">    |</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">ComponentOptions</span><span style="color:#F97583;"> &amp;</span><span style="color:#B392F0;"> CustomElementsOptions</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    |</span><span style="color:#B392F0;"> ComponentOptions</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;setup&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#FFAB70;">  options</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> CustomElementsOptions</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  new</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">props</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> HTMLElement</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> CustomElementsOptions</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  styles</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">[]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // the following options are 3.5+</span></span>
<span class="line"><span style="color:#B392F0;">  configureApp</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">app</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> App</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span></span>
<span class="line"><span style="color:#FFAB70;">  shadowRoot</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> boolean</span></span>
<span class="line"><span style="color:#FFAB70;">  nonce</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>Type is simplified for readability.</p></blockquote></li><li><p><strong>Details</strong></p><p>In addition to normal component options, <code>defineCustomElement()</code> also supports a number of options that are custom-elements-specific:</p><ul><li><p><strong><code>styles</code></strong>: an array of inlined CSS strings for providing CSS that should be injected into the element&#39;s shadow root.</p></li><li><p><strong><code>configureApp</code></strong> <sup class="vt-badge" data-text="3.5+"></sup>: a function that can be used to configure the Vue app instance for the custom element.</p></li><li><p><strong><code>shadowRoot</code></strong> <sup class="vt-badge" data-text="3.5+"></sup>: <code>boolean</code>, defaults to <code>true</code>. Set to <code>false</code> to render the custom element without a shadow root. This means <code>&lt;style&gt;</code> in custom element SFCs will no longer be encapsulated.</p></li><li><p><strong><code>nonce</code></strong> <sup class="vt-badge" data-text="3.5+"></sup>: <code>string</code>, if provided, will be set as the <code>nonce</code> attribute on style tags injected to the shadow root.</p></li></ul><p>Note that instead of being passed as part of the component itself, these options can also be passed via a second argument:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Element </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./MyElement.ce.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">defineCustomElement</span><span style="color:#E1E4E8;">(Element, {</span></span>
<span class="line"><span style="color:#B392F0;">  configureApp</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">app</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>The return value is a custom element constructor that can be registered using <a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/define" target="_blank" rel="noreferrer"><code>customElements.define()</code></a>.</p></li><li><p><strong>Example</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineCustomElement } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> MyVueElement</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineCustomElement</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#6A737D;">  /* component options */</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Register the custom element.</span></span>
<span class="line"><span style="color:#E1E4E8;">customElements.</span><span style="color:#B392F0;">define</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;my-vue-element&#39;</span><span style="color:#E1E4E8;">, MyVueElement)</span></span></code></pre></div></li><li><p><strong>See also</strong></p><ul><li><p><a href="/docs/guide/extras/web-components.html#building-custom-elements-with-vue">Guide - Building Custom Elements with Vue</a></p></li><li><p>Also note that <code>defineCustomElement()</code> requires <a href="/docs/guide/extras/web-components.html#sfc-as-custom-element">special config</a> when used with Single-File Components.</p></li></ul></li></ul><h2 id="usehost" tabindex="-1">useHost() <sup class="vt-badge" data-text="3.5+"></sup> <a class="header-anchor" href="#usehost" aria-label="Permalink to &quot;useHost() &lt;sup class=&quot;vt-badge&quot; data-text=&quot;3.5+&quot;/&gt; {#usehost}&quot;">​</a></h2><p>A Composition API helper that returns the host element of the current Vue custom element.</p><h2 id="useshadowroot" tabindex="-1">useShadowRoot() <sup class="vt-badge" data-text="3.5+"></sup> <a class="header-anchor" href="#useshadowroot" aria-label="Permalink to &quot;useShadowRoot() &lt;sup class=&quot;vt-badge&quot; data-text=&quot;3.5+&quot;/&gt; {#useshadowroot}&quot;">​</a></h2><p>A Composition API helper that returns the shadow root of the current Vue custom element.</p><h2 id="this-host" tabindex="-1">this.$host <sup class="vt-badge" data-text="3.5+"></sup> <a class="header-anchor" href="#this-host" aria-label="Permalink to &quot;this.$host &lt;sup class=&quot;vt-badge&quot; data-text=&quot;3.5+&quot;/&gt; {#this-host}&quot;">​</a></h2><p>An Options API property that exposes the host element of the current Vue custom element.</p>`,10)])])}const h=e(a,[["render",l]]);export{m as __pageData,h as default};
