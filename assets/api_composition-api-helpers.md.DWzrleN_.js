import{_ as a,c as n,o as e,b as l}from"./chunks/framework.CSxrXzdz.js";const d=JSON.parse('{"title":"Composition API: Helpers","description":"","frontmatter":{},"headers":[{"level":2,"title":"useAttrs()","slug":"useattrs","link":"#useattrs","children":[]},{"level":2,"title":"useSlots()","slug":"useslots","link":"#useslots","children":[]},{"level":2,"title":"useModel()","slug":"usemodel","link":"#usemodel","children":[]},{"level":2,"title":"useTemplateRef()","slug":"usetemplateref","link":"#usetemplateref","children":[]},{"level":2,"title":"useId()","slug":"useid","link":"#useid","children":[]}],"relativePath":"api/composition-api-helpers.md","filePath":"api/composition-api-helpers.md"}'),p={name:"api/composition-api-helpers.md"};function o(t,s,c,r,i,E){return e(),n("div",null,[...s[0]||(s[0]=[l(`<h1 id="composition-api-helpers" tabindex="-1">Composition API: Helpers <a class="header-anchor" href="#composition-api-helpers" aria-label="Permalink to &quot;Composition API: Helpers {#composition-api-helpers}&quot;">​</a></h1><h2 id="useattrs" tabindex="-1">useAttrs() <a class="header-anchor" href="#useattrs" aria-label="Permalink to &quot;useAttrs() {#useattrs}&quot;">​</a></h2><p>Returns the <code>attrs</code> object from the <a href="/api/composition-api-setup.html#setup-context">Setup Context</a>, which includes the <a href="/guide/components/attrs.html#fallthrough-attributes">fallthrough attributes</a> of the current component. This is intended to be used in <code>&lt;script setup&gt;</code> where the setup context object is not available.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> useAttrs</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Record</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">unknown</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li></ul><h2 id="useslots" tabindex="-1">useSlots() <a class="header-anchor" href="#useslots" aria-label="Permalink to &quot;useSlots() {#useslots}&quot;">​</a></h2><p>Returns the <code>slots</code> object from the <a href="/api/composition-api-setup.html#setup-context">Setup Context</a>, which includes parent passed slots as callable functions that return Virtual DOM nodes. This is intended to be used in <code>&lt;script setup&gt;</code> where the setup context object is not available.</p><p>If using TypeScript, <a href="/api/sfc-script-setup.html#defineslots"><code>defineSlots()</code></a> should be preferred instead.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> useSlots</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Record</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, (</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">[]) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> VNode</span><span style="color:#E1E4E8;">[]&gt;</span></span></code></pre></div></li></ul><h2 id="usemodel" tabindex="-1">useModel() <a class="header-anchor" href="#usemodel" aria-label="Permalink to &quot;useModel() {#usemodel}&quot;">​</a></h2><p>This is the underlying helper that powers <a href="/api/sfc-script-setup.html#definemodel"><code>defineModel()</code></a>. If using <code>&lt;script setup&gt;</code>, <code>defineModel()</code> should be preferred instead.</p><ul><li><p>Only available in 3.4+</p></li><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> useModel</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#FFAB70;">  props</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Record</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="color:#FFAB70;">  key</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  options</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> DefineModelOptions</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ModelRef</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> DefineModelOptions</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  get</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">v</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> any</span></span>
<span class="line"><span style="color:#B392F0;">  set</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">v</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> any</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> ModelRef</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">M</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> PropertyKey</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">G</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">S</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> Ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">G</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#B392F0;">  ModelRef</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">M</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">G</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">S</span><span style="color:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="color:#B392F0;">  Record</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">M</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> undefined</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre></div></li><li><p><strong>Example</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  props: [</span><span style="color:#9ECBFF;">&#39;count&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  emits: [</span><span style="color:#9ECBFF;">&#39;update:count&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> msg</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> useModel</span><span style="color:#E1E4E8;">(props, </span><span style="color:#9ECBFF;">&#39;count&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    msg.value </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Details</strong></p><p><code>useModel()</code> can be used in non-SFC components, e.g. when using raw <code>setup()</code> function. It expects the <code>props</code> object as the first argument, and the model name as the second argument. The optional third argument can be used to declare custom getter and setter for the resulting model ref. Note that unlike <code>defineModel()</code>, you are responsible for declaring the props and emits yourself.</p></li></ul><h2 id="usetemplateref" tabindex="-1">useTemplateRef() <sup class="vt-badge" data-text="3.5+"></sup> <a class="header-anchor" href="#usetemplateref" aria-label="Permalink to &quot;useTemplateRef() &lt;sup class=&quot;vt-badge&quot; data-text=&quot;3.5+&quot; /&gt; {#usetemplateref}&quot;">​</a></h2><p>Returns a shallow ref whose value will be synced with the template element or component with a matching ref attribute.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> useTemplateRef</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Readonly</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">ShallowRef</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">&gt;&gt;</span></span></code></pre></div></li><li><p><strong>Example</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useTemplateRef, onMounted } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> inputRef</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> useTemplateRef</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;input&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">onMounted</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  inputRef.value.</span><span style="color:#B392F0;">focus</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">input</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;input&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>See also</strong></p><ul><li><a href="/guide/essentials/template-refs.html">Guide - Template Refs</a></li><li><a href="/guide/typescript/composition-api.html#typing-template-refs">Guide - Typing Template Refs</a> <sup class="vt-badge ts"></sup></li><li><a href="/guide/typescript/composition-api.html#typing-component-template-refs">Guide - Typing Component Template Refs</a> <sup class="vt-badge ts"></sup></li></ul></li></ul><h2 id="useid" tabindex="-1">useId() <sup class="vt-badge" data-text="3.5+"></sup> <a class="header-anchor" href="#useid" aria-label="Permalink to &quot;useId() &lt;sup class=&quot;vt-badge&quot; data-text=&quot;3.5+&quot; /&gt; {#useid}&quot;">​</a></h2><p>Used to generate unique-per-application IDs for accessibility attributes or form elements.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> useId</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span></span></code></pre></div></li><li><p><strong>Example</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useId } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> id</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> useId</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">form</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">label</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">for</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">id</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;Name:&lt;/</span><span style="color:#85E89D;">label</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">id</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;"> type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">form</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>Details</strong></p><p>IDs generated by <code>useId()</code> are unique-per-application. It can be used to generate IDs for form elements and accessibility attributes. Multiple calls in the same component will generate different IDs; multiple instances of the same component calling <code>useId()</code> will also have different IDs.</p><p>IDs generated by <code>useId()</code> are also guaranteed to be stable across the server and client renders, so they can be used in SSR applications without leading to hydration mismatches.</p><p>If you have more than one Vue application instance of the same page, you can avoid ID conflicts by giving each app an ID prefix via <a href="/api/application.html#app-config-idprefix"><code>app.config.idPrefix</code></a>.</p><div class="warning custom-block"><p class="custom-block-title">Caution</p><p><code>useId()</code> should not be called inside a <code>computed()</code> property as it may cause instance conflicts. Instead, declare the ID outside of <code>computed()</code> and reference it within the computed function.</p></div></li></ul>`,17)])])}const u=a(p,[["render",o]]);export{d as __pageData,u as default};
