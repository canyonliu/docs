import{ac as T,c as o,o as l,a as i,q as r,w as g,F as m,p as h,t as F,ad as f,r as B,j as _,M as C,a7 as k,b as y}from"./chunks/framework.ZWVK1dfd.js";import{g as v}from"./chunks/index.CH_iu5NA.js";const x={class:"demo"},q={__name:"ListBasic",setup(d){const e=T([1,2,3,4,5]);let a=e.length+1;function c(){e.splice(p(),0,a++)}function E(){e.splice(p(),1)}function p(){return Math.floor(Math.random()*e.length)}return(u,s)=>(l(),o("div",x,[i("button",{onClick:c},"Add at random index"),i("button",{onClick:E},"Remove at random index"),r(f,{name:"list",tag:"ul",style:{"margin-top":"20px"}},{default:g(()=>[(l(!0),o(m,null,h(e,n=>(l(),o("li",{key:n},F(n),1))),128))]),_:1})]))}},S={class:"demo"},w={__name:"ListMove",setup(d){const e=B([1,2,3,4,5]);let a=e.value.length+1;function c(){e.value.splice(p(),0,a++)}function E(){e.value.splice(p(),1)}function p(){return Math.floor(Math.random()*e.value.length)}function u(s){let n=s.length,t;for(;n!=0;)t=Math.floor(Math.random()*n),n--,[s[n],s[t]]=[s[t],s[n]];return s}return(s,n)=>(l(),o("div",S,[i("button",{onClick:c},"Add"),i("button",{onClick:E},"Remove"),i("button",{onClick:n[0]||(n[0]=t=>u(e.value))},"Shuffle"),r(f,{name:"list2",tag:"ul",style:{"margin-top":"20px"}},{default:g(()=>[(l(!0),o(m,null,h(e.value,t=>(l(),o("li",{class:"list-item",key:t},F(t),1))),128))]),_:1})]))}},N={class:"demo",style:{height:"265px"}},D=["data-index"],G={__name:"ListStagger",setup(d){const e=[{msg:"Bruce Lee"},{msg:"Jackie Chan"},{msg:"Chuck Norris"},{msg:"Jet Li"},{msg:"Kung Fury"}],a=B(""),c=_(()=>e.filter(s=>s.msg.toLowerCase().includes(a.value.toLowerCase())));function E(s){s.style.opacity=0,s.style.height=0}function p(s,n){v.to(s,{opacity:1,height:"1.6em",delay:s.dataset.index*.15,onComplete:n})}function u(s,n){v.to(s,{opacity:0,height:0,delay:s.dataset.index*.15,onComplete:n})}return(s,n)=>(l(),o("div",N,[C(i("input",{"onUpdate:modelValue":n[0]||(n[0]=t=>a.value=t),style:{"margin-bottom":"20px"}},null,512),[[k,a.value]]),r(f,{tag:"ul",css:!1,onBeforeEnter:E,onEnter:p,onLeave:u},{default:g(()=>[(l(!0),o(m,null,h(c.value,(t,b)=>(l(),o("li",{key:t.msg,"data-index":b},F(t.msg),9,D))),128))]),_:1})]))}},L=JSON.parse('{"title":"TransitionGroup","description":"","frontmatter":{},"headers":[{"level":2,"title":"Differences from <Transition>","slug":"differences-from-transition","link":"#differences-from-transition","children":[]},{"level":2,"title":"Enter / Leave Transitions","slug":"enter-leave-transitions","link":"#enter-leave-transitions","children":[]},{"level":2,"title":"Move Transitions","slug":"move-transitions","link":"#move-transitions","children":[{"level":3,"title":"Custom TransitionGroup classes","slug":"custom-transitiongroup-classes","link":"#custom-transitiongroup-classes","children":[]}]},{"level":2,"title":"Staggering List Transitions","slug":"staggering-list-transitions","link":"#staggering-list-transitions","children":[]}],"relativePath":"guide/built-ins/transition-group.md","filePath":"guide/built-ins/transition-group.md"}'),A={name:"guide/built-ins/transition-group.md"},V=Object.assign(A,{setup(d){return(e,a)=>(l(),o("div",null,[a[0]||(a[0]=y(`<h1 id="transitiongroup" tabindex="-1">TransitionGroup <a class="header-anchor" href="#transitiongroup" aria-label="Permalink to &quot;TransitionGroup {#transitiongroup}&quot;">​</a></h1><p><code>&lt;TransitionGroup&gt;</code> is a built-in component designed for animating the insertion, removal, and order change of elements or components that are rendered in a list.</p><h2 id="differences-from-transition" tabindex="-1">Differences from <code>&lt;Transition&gt;</code> <a class="header-anchor" href="#differences-from-transition" aria-label="Permalink to &quot;Differences from \`&lt;Transition&gt;\` {#differences-from-transition}&quot;">​</a></h2><p><code>&lt;TransitionGroup&gt;</code> supports the same props, CSS transition classes, and JavaScript hook listeners as <code>&lt;Transition&gt;</code>, with the following differences:</p><ul><li><p>By default, it doesn&#39;t render a wrapper element. But you can specify an element to be rendered with the <code>tag</code> prop.</p></li><li><p><a href="./transition.html#transition-modes">Transition modes</a> are not available, because we are no longer alternating between mutually exclusive elements.</p></li><li><p>Elements inside are <strong>always required</strong> to have a unique <code>key</code> attribute.</p></li><li><p>CSS transition classes will be applied to individual elements in the list, <strong>not</strong> to the group / container itself.</p></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>When used in <a href="/docs/guide/essentials/component-basics.html#in-dom-template-parsing-caveats">in-DOM templates</a>, it should be referenced as <code>&lt;transition-group&gt;</code>.</p></div><h2 id="enter-leave-transitions" tabindex="-1">Enter / Leave Transitions <a class="header-anchor" href="#enter-leave-transitions" aria-label="Permalink to &quot;Enter / Leave Transitions {#enter-leave-transitions}&quot;">​</a></h2><p>Here is an example of applying enter / leave transitions to a <code>v-for</code> list using <code>&lt;TransitionGroup&gt;</code>:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">TransitionGroup</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;list&quot;</span><span style="color:#B392F0;"> tag</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ul&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">li</span><span style="color:#B392F0;"> v-for</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">item </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> items</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">item</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    {{ item }}</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">TransitionGroup</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">.list-enter-active</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">.list-leave-active</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  transition</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">all</span><span style="color:#79B8FF;"> 0.5</span><span style="color:#F97583;">s</span><span style="color:#79B8FF;"> ease</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">.list-enter-from</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">.list-leave-to</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  opacity</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#79B8FF;">  transform</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">translateX</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">30</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div>`,10)),r(q),a[1]||(a[1]=y(`<h2 id="move-transitions" tabindex="-1">Move Transitions <a class="header-anchor" href="#move-transitions" aria-label="Permalink to &quot;Move Transitions {#move-transitions}&quot;">​</a></h2><p>The above demo has some obvious flaws: when an item is inserted or removed, its surrounding items instantly &quot;jump&quot; into place instead of moving smoothly. We can fix this by adding a few additional CSS rules:</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span style="color:#B392F0;">.list-move</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">/* apply transition to moving elements */</span></span>
<span class="line"><span style="color:#B392F0;">.list-enter-active</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">.list-leave-active</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  transition</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">all</span><span style="color:#79B8FF;"> 0.5</span><span style="color:#F97583;">s</span><span style="color:#79B8FF;"> ease</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">.list-enter-from</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">.list-leave-to</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  opacity</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#79B8FF;">  transform</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">translateX</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">30</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#6A737D;">/* ensure leaving items are taken out of layout flow so that moving</span></span>
<span class="line highlighted"><span style="color:#6A737D;">   animations can be calculated correctly. */</span></span>
<span class="line highlighted"><span style="color:#B392F0;">.list-leave-active</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#79B8FF;">  position</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">absolute</span><span style="color:#E1E4E8;">;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>Now it looks much better - even animating smoothly when the whole list is shuffled:</p>`,4)),r(w),a[2]||(a[2]=y(`<p><a href="/docs/examples/#list-transition">Full Example</a></p><h3 id="custom-transitiongroup-classes" tabindex="-1">Custom TransitionGroup classes <a class="header-anchor" href="#custom-transitiongroup-classes" aria-label="Permalink to &quot;Custom TransitionGroup classes {#custom-transitiongroup-classes}&quot;">​</a></h3><p>You can also specify custom transition classes for the moving element by passing the <code>moveClass</code> prop to <code>&lt;TransitionGroup&gt;</code>, just like <a href="/docs/guide/built-ins/transition.html#custom-transition-classes">custom transition classes on <code>&lt;Transition&gt;</code></a>.</p><h2 id="staggering-list-transitions" tabindex="-1">Staggering List Transitions <a class="header-anchor" href="#staggering-list-transitions" aria-label="Permalink to &quot;Staggering List Transitions {#staggering-list-transitions}&quot;">​</a></h2><p>By communicating with JavaScript transitions through data attributes, it&#39;s also possible to stagger transitions in a list. First, we render the index of an item as a data attribute on the DOM element:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">TransitionGroup</span></span>
<span class="line"><span style="color:#B392F0;">  tag</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ul&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  :</span><span style="color:#B392F0;">css</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">false</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">before-enter</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">onBeforeEnter</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">enter</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">onEnter</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">leave</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">onLeave</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">li</span></span>
<span class="line"><span style="color:#B392F0;">    v-for</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">(item, index) </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> computedList</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    :</span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">item.msg</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    :</span><span style="color:#B392F0;">data-index</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">index</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    {{ item.msg }}</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">TransitionGroup</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>Then, in JavaScript hooks, we animate the element with a delay based on the data attribute. This example is using the <a href="https://gsap.com/" target="_blank" rel="noreferrer">GSAP library</a> to perform the animation:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> onEnter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">done</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  gsap.</span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;">(el, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    opacity: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    height: </span><span style="color:#9ECBFF;">&#39;1.6em&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    delay: el.dataset.index </span><span style="color:#F97583;">*</span><span style="color:#79B8FF;"> 0.15</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    onComplete: done</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div>`,8)),r(G),a[3]||(a[3]=y('<div class="composition-api"><p><a href="https://play.vuejs.org/#eNqlVMuu0zAQ/ZVRNklRm7QLWETtBW4FSFCxYkdYmGSSmjp28KNQVfl3xk7SFyvEponPGc+cOTPNOXrbdenRYZRHa1Nq3lkwaF33VEjedkpbOIPGeg6lajtnsYIeaq1aiOlSfAlqDOtG3L8SUchSSWNBcPrZwNdCAqVqTZND/KxdibBDjKGf3xIfWXngCNs9k4/Udu/KA3xWWnPz1zW0sOOP6CcnG3jv9ImIQn67SvrpUJ9IE/WVxPHsSkw97gbN0zFJZrB5grNPrskcLUNXac2FRZ0k3GIbIvxLSsVTq3bqF+otM5jMUi5L4So0SSicHplwOKOyfShdO1lariQo+Yy10vhO+qwoZkNFFKmxJ4Gp6ljJrRe+vMP3yJu910swNXqXcco1h0pJHDP6CZHEAAcAYMydwypYCDAkJRdX6Sts4xGtUDAKotIVs9Scpd4q/A0vYJmuXo5BSm7JOIEW81DVo77VR207ZEf8F23LB23T+X9VrbNh82nn6UAz7ASzSCeANZe0AnBctIqqbIoojLCIIBvoL5pJw31DH7Ry3VDKsoYinSii4ZyXxhBQM2Fwwt58D7NeoB8QkXfDvwRd2XtceOsCHkwc8KCINAk+vADJppQUFjZ0DsGVGT3uFn1KSjoPeKLoaYtvCO/rIlz3vH9O5FiU/nXny/pDT6YGKZngg0/Zg1GErrMbp6N5NHxJFi3N/4dRkj5IYf5ULxCmiPJpI4rIr4kHimhvbWfyLHOyOzQpNZZ57jXNy4nRGFLTR/0fWBqe7w==" target="_blank" rel="noreferrer">Full Example in the Playground</a></p></div><div class="options-api"><p><a href="https://play.vuejs.org/#eNqtVE2P0zAQ/SujXNqgNmkPcIjaBbYCJKg4cSMcTDJNTB07+KNsVfW/M3aabNpyQltViT1vPPP8Zian6H3bJgeHURatTKF5ax9yyZtWaQuVYS3stGpg4peTXOayUNJYEJwea/ieS4ATNKbKYPKoXYGwRZzAeTYGPrNizxE2NZO30KZ2xR6+Kq25uTuGFrb81vrFyQo+On0kIJc/PCV8CmxL3DEnLJy8e8ksm8bdGkCjdVr2O4DfDvWRgtGN/JYC0SOkKVTTOotl1jv3hi3d+DngENILkey4sKinU26xiWH9AH6REN/Eqq36g3rDDE7jhMtCuBLN1NbcJIFEHN9RaNDWqjQDAyUfcac0fpA+CYoRCRSJsUeBiWpZwe2RSrK4w2rkVe2rdYG6LD5uH3EGpZI4iuurTdwDNBjpRJclg+UlhP914UnMZfIGm8kIKVEwciYivhoGLQlQ4hO8gkWyfD1yVHJDKgu0mAUmPXLuxRkYb5Ed8H8YL/7BeGx7Oa6hkLmk/yodBoo21BKtYBZpB7DikroKDvNGUeZ1HoVmyCNIO/ibZtJwy5X8pJVru9CWVeTpRB51+6wwhgw7Jgz2tnc/Q6/M0ZeWwKvmGZye0Wu78PIGexC6swdGxEnw/q6HOYUkt9DwMwhKxfS6GpY+KPHc45G8+6EYAV7reTjucf/uwUtSmvvTME1wDuISlVTwTqf0RiiyrtKR0tEs6r5l84b645dRkr5zoT8oXwBMHg2Tlke+jbwhj2prW5OlqZPtvkroYqnH3lK9nLgI46scnf8Cn22kBA==" target="_blank" rel="noreferrer">Full Example in the Playground</a></p></div><hr><p><strong>Related</strong></p><ul><li><a href="/docs/api/built-in-components.html#transitiongroup"><code>&lt;TransitionGroup&gt;</code> API reference</a></li></ul>',5))]))}});export{L as __pageData,V as default};
