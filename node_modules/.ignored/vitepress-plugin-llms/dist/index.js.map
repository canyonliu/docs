{"version":3,"sources":["../src/index.ts","../src/helpers.ts","../src/constants.ts","../src/logger.ts","../package.json"],"sourcesContent":["import type { ViteDevServer, Plugin } from 'vite'\n\nimport fs from 'node:fs'\nimport path from 'node:path'\n\nimport pc from 'picocolors'\nimport { minimatch } from 'minimatch'\nimport {\n\textractTitle,\n\tgenerateLLMsFullTxt,\n\tgenerateLLMsTxt,\n\tstripExt,\n\tstripExtPosix,\n} from './helpers'\nimport log from './logger'\nimport type { LlmstxtSettings, PreparedFile, VitePressConfig } from './types'\nimport matter from 'gray-matter'\nimport { defaultLLMsTxtTemplate } from './constants'\nimport { name as packageName } from '../package.json'\n\nconst PLUGIN_NAME = packageName\n\n/**\n * [VitePress](http://vitepress.dev/) plugin for generating raw documentation\n * for **LLMs** in Markdown format which is much lighter and more efficient for LLMs\n *\n * @param [userSettings={}] - Plugin settings.\n *\n * @see https://github.com/okineadev/vitepress-plugin-llms\n * @see https://llmstxt.org/\n */\nexport default function llmstxt(userSettings: LlmstxtSettings = {}): Plugin {\n\t// Create a settings object with defaults explicitly merged\n\tconst settings: LlmstxtSettings = {\n\t\tgenerateLLMsFullTxt: true,\n\t\tgenerateLLMsTxt: true,\n\t\tignoreFiles: [],\n\t\tcustomLLMsTxtTemplate: defaultLLMsTxtTemplate,\n\t\t...userSettings,\n\t}\n\n\t// Store the resolved Vite config\n\tlet config: VitePressConfig\n\n\t// Set to store all markdown file paths\n\tconst mdFiles: Set<string> = new Set()\n\n\t// Flag to identify which build we're in\n\tlet isSsrBuild = false\n\n\treturn {\n\t\tname: PLUGIN_NAME,\n\t\tenforce: 'post', // Run after other plugins\n\n\t\t/** Resolves the Vite configuration and sets up the working directory. */\n\t\tconfigResolved(resolvedConfig) {\n\t\t\tconfig = resolvedConfig as unknown as VitePressConfig\n\t\t\tif (settings.workDir) {\n\t\t\t\tsettings.workDir = path.resolve(\n\t\t\t\t\tconfig.vitepress.srcDir,\n\t\t\t\t\tsettings.workDir as string,\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tsettings.workDir = config.vitepress.srcDir\n\t\t\t}\n\t\t\t// Detect if this is the SSR build\n\t\t\tisSsrBuild = !!resolvedConfig.build?.ssr\n\t\t\tlog.info(\n\t\t\t\t`Plugin initialized ${isSsrBuild ? pc.dim('(SSR build)') : pc.dim('(client build)')}`,\n\t\t\t)\n\t\t},\n\n\t\t/** Configures the development server to handle `llms.txt` and markdown files for LLMs. */\n\t\tconfigureServer(server: ViteDevServer) {\n\t\t\tlog.info('Development server configured to serve markdown files')\n\t\t\tserver.middlewares.use((req, res, next) => {\n\t\t\t\tif (req.url?.endsWith('.md') || req.url?.endsWith('.txt')) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// Try to read and serve the markdown file\n\t\t\t\t\t\tconst filePath = path.resolve(\n\t\t\t\t\t\t\tconfig.vitepress?.outDir ?? 'dist',\n\t\t\t\t\t\t\t`${stripExt(req.url)}.md`,\n\t\t\t\t\t\t)\n\t\t\t\t\t\tconst content = fs.readFileSync(filePath, 'utf-8')\n\t\t\t\t\t\tres.setHeader('Content-Type', 'text/markdown')\n\t\t\t\t\t\tres.end(content)\n\t\t\t\t\t\treturn\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t// If file doesn't exist or can't be read, continue to next middleware\n\t\t\t\t\t\tnext()\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Pass to next middleware if not handled\n\t\t\t\tnext()\n\t\t\t})\n\t\t},\n\n\t\t/**\n\t\t * Resets the collection of markdown files when the build starts.\n\t\t * This ensures we don't include stale data from previous builds.\n\t\t */\n\t\tbuildStart() {\n\t\t\tmdFiles.clear()\n\t\t\tlog.info('Build started, file collection cleared')\n\t\t},\n\n\t\t/**\n\t\t * Processes each file that Vite transforms and collects markdown files.\n\t\t * @param _ - The file content (not used).\n\t\t * @param id - The file identifier (path).\n\t\t * @returns null if the file is processed, otherwise returns the original content.\n\t\t */\n\t\ttransform(_, id: string) {\n\t\t\tif (!id.endsWith('.md')) {\n\t\t\t\treturn null\n\t\t\t}\n\n\t\t\t// Skip files outside workDir if it's configured\n\t\t\tif (!id.startsWith(settings.workDir as string)) {\n\t\t\t\treturn null\n\t\t\t}\n\n\t\t\tif (settings.ignoreFiles?.length) {\n\t\t\t\tfor (const pattern of settings.ignoreFiles) {\n\t\t\t\t\tif (\n\t\t\t\t\t\ttypeof pattern === 'string' &&\n\t\t\t\t\t\tminimatch(path.relative(settings.workDir as string, id), pattern)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn null\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add markdown file path to our collection\n\t\t\tmdFiles.add(id)\n\t\t\t// Return null to avoid modifying the file\n\t\t\treturn null\n\t\t},\n\n\t\t/**\n\t\t * Runs only in the client build (not SSR) after completion.\n\t\t * This ensures the processing happens exactly once.\n\t\t */\n\t\tgenerateBundle() {\n\t\t\t// Skip processing during SSR build\n\t\t\tif (isSsrBuild) {\n\t\t\t\tlog.info('Skipping file generation in SSR build')\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tconst outDir = config.vitepress?.outDir ?? 'dist'\n\n\t\t\t// Create output directory if it doesn't exist\n\t\t\tif (!fs.existsSync(outDir)) {\n\t\t\t\tlog.info(`Creating output directory: ${pc.cyan(outDir)}`)\n\t\t\t\tfs.mkdirSync(outDir, { recursive: true })\n\t\t\t}\n\n\t\t\tconst mdFilesList = Array.from(mdFiles)\n\t\t\tconst fileCount = mdFilesList.length\n\n\t\t\t// Skip if no files found\n\t\t\tif (fileCount === 0) {\n\t\t\t\tlog.warn('No markdown files found to process')\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tlog.info(`Processing ${pc.bold(fileCount.toString())} markdown files...`)\n\n\t\t\tconst preparedFiles: PreparedFile[] = []\n\n\t\t\t// Copy all markdown files to output directory\n\t\t\tfor (const file of mdFilesList) {\n\t\t\t\tconst relativePath = path.relative(settings.workDir as string, file)\n\t\t\t\tconst targetPath = path.resolve(outDir, relativePath)\n\n\t\t\t\ttry {\n\t\t\t\t\tconst fileContent = matter(fs.readFileSync(file, 'utf-8'))\n\t\t\t\t\tconst title = extractTitle(fileContent.orig.toString()) || 'Untitled'\n\n\t\t\t\t\tpreparedFiles.push({ title, path: file })\n\n\t\t\t\t\t// Ensure target directory exists\n\t\t\t\t\tfs.mkdirSync(path.dirname(targetPath), { recursive: true })\n\n\t\t\t\t\tfileContent.data = {\n\t\t\t\t\t\turl: `/${stripExtPosix(relativePath)}.md`,\n\t\t\t\t\t}\n\n\t\t\t\t\tif (fileContent.data?.description?.length) {\n\t\t\t\t\t\t// biome-ignore lint/correctness/noSelfAssign: <explanation>\n\t\t\t\t\t\tfileContent.data.description = fileContent.data?.description\n\t\t\t\t\t}\n\n\t\t\t\t\t// Copy file to output directory\n\t\t\t\t\tfs.writeFileSync(\n\t\t\t\t\t\ttargetPath,\n\t\t\t\t\t\tmatter.stringify(fileContent.content, fileContent.data),\n\t\t\t\t\t)\n\t\t\t\t\tlog.success(`Copied ${pc.cyan(relativePath)} to output directory`)\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tlog.error(`Failed to copy ${pc.cyan(relativePath)}: ${error.message}`)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Sort files by title for better organization\n\t\t\tpreparedFiles.sort((a, b) => a.title.localeCompare(b.title))\n\n\t\t\t// Generate llms.txt - table of contents with links\n\t\t\tif (settings.generateLLMsTxt) {\n\t\t\t\tconst llmsTxtPath = path.resolve(outDir, 'llms.txt')\n\n\t\t\t\tconst llmsTxt = generateLLMsTxt(\n\t\t\t\t\tpreparedFiles,\n\t\t\t\t\tpath.resolve(settings.workDir as string, 'index.md'),\n\t\t\t\t\tsettings.workDir as string,\n\t\t\t\t\tsettings.customLLMsTxtTemplate || defaultLLMsTxtTemplate,\n\t\t\t\t)\n\n\t\t\t\tfs.writeFileSync(llmsTxtPath, llmsTxt, 'utf-8')\n\t\t\t\tlog.success(\n\t\t\t\t\t`Generated ${pc.cyan('llms.txt')} with ${pc.bold(fileCount.toString())} documentation sections`,\n\t\t\t\t)\n\t\t\t}\n\n\t\t\t// Generate llms-full.txt - all content in one file\n\t\t\tif (settings.generateLLMsFullTxt) {\n\t\t\t\tconst llmsFullTxtPath = path.resolve(outDir, 'llms-full.txt')\n\n\t\t\t\tlog.info(`Generating ${pc.cyan('llms-full.txt')}...`)\n\n\t\t\t\tconst llmsFullTxt = generateLLMsFullTxt(\n\t\t\t\t\tpreparedFiles,\n\t\t\t\t\tsettings.workDir as string,\n\t\t\t\t)\n\n\t\t\t\t// Write content to llms-full.txt\n\t\t\t\tfs.writeFileSync(llmsFullTxtPath, llmsFullTxt, 'utf-8')\n\t\t\t\tlog.success(\n\t\t\t\t\t`Generated ${pc.cyan('llms-full.txt')} with ${pc.bold(fileCount.toString())} markdown files`,\n\t\t\t\t)\n\t\t\t}\n\t\t},\n\t}\n}\n","import fs from 'node:fs'\nimport path from 'node:path'\nimport type { PreparedFile, VitePressConfig } from './types'\nimport matter from 'gray-matter'\n// @ts-ignore\nimport markdownTitle from 'markdown-title'\nimport { defaultLLMsTxtTemplate } from './constants'\n\n/**\n * Splits a file path into its directory and file components.\n *\n * @param filepath - The path to the file.\n * @returns An object containing the directory and file name.\n */\nexport const splitDirAndFile = (filepath: string) => ({\n\tdir: path.dirname(filepath),\n\tfile: path.basename(filepath),\n})\n\n/**\n * Strips the file extension from a given file path.\n *\n * @param filepath - The path to the file.\n * @returns The filename without the extension.\n */\nexport const stripExt = (filepath: string) => {\n\tconst { dir, file } = splitDirAndFile(filepath)\n\n\treturn path.join(dir, path.basename(file, path.extname(file)))\n}\n\n/**\n * Strips the file extension from a given file path using POSIX format.\n *\n * @param filepath - The path to the file.\n * @returns The filename without the extension in POSIX format.\n */\nexport const stripExtPosix = (filepath: string) => {\n\tconst { dir, file } = splitDirAndFile(filepath)\n\n\treturn path.posix.join(dir, path.basename(file, path.extname(file)))\n}\n\n/**\n * Extracts the title from a markdown file.\n *\n * @param content - The content of the markdown file.\n * @returns The title of the markdown file, or a default title if none is found.\n */\nexport function extractTitle(content: string): string {\n\tconst contentData = matter(content)\n\treturn (\n\t\tcontentData.data?.titleTemplate ||\n\t\tcontentData.data?.title ||\n\t\tcontentData.data?.hero?.name ||\n\t\tmarkdownTitle(content)\n\t)\n}\n\n/**\n * Generates a Table of Contents (TOC) for the provided prepared files.\n *\n * Each entry in the TOC is formatted as a markdown link to the corresponding\n * text file.\n *\n * @param preparedFiles - An array of prepared files.\n * @param srcDir - The VitePress source directory.\n * @returns A string representing the formatted Table of Contents.\n */\nexport function generateTOC(\n\tpreparedFiles: PreparedFile[],\n\tsrcDir: VitePressConfig['vitepress']['srcDir'],\n) {\n\tlet tableOfContent = ''\n\n\tfor (const file of preparedFiles) {\n\t\tconst relativePath = path.relative(srcDir, file.path)\n\t\ttableOfContent += `- [${file.title}](/${stripExtPosix(relativePath)}.md)\\n`\n\t}\n\n\treturn tableOfContent\n}\n\n/**\n * Generates a LLMs.txt file with a table of contents and links to all documentation sections.\n *\n * @param preparedFiles - An array of prepared files.\n * @param indexMd - Path to the main documentation file `index.md`.\n * @param llmsTxtTemplate - Template to use for generating `llms.txt`.\n * @returns A string representing the content of the `llms.txt` file.\n *\n * @see https://llmstxt.org\n */\nexport function generateLLMsTxt(\n\tpreparedFiles: PreparedFile[],\n\tindexMd: string,\n\tsrcDir: VitePressConfig['vitepress']['srcDir'],\n\tllmsTxtTemplate: string = defaultLLMsTxtTemplate,\n) {\n\tconst indexMdFile = matter(fs.readFileSync(indexMd, 'utf-8') as string)\n\tlet llmsTxtContent = llmsTxtTemplate\n\n\tllmsTxtContent = llmsTxtContent.replace(\n\t\t/{title}/gi,\n\t\textractTitle(indexMdFile.orig.toString()) || 'LLMs Documentation',\n\t)\n\tllmsTxtContent = llmsTxtContent.replace(\n\t\t/{description}/gi,\n\t\tindexMdFile.data?.hero?.tagline ||\n\t\t\tindexMdFile.data?.titleTemplate ||\n\t\t\t'This file contains links to all documentation sections.',\n\t)\n\n\tllmsTxtContent = llmsTxtContent.replace(\n\t\t/{toc}/gi,\n\t\tgenerateTOC(preparedFiles, srcDir),\n\t)\n\n\treturn llmsTxtContent\n}\n\n/**\n * Generates a `llms-full.txt` file content with all documentation in one file.\n *\n * @param preparedFiles - An array of prepared files.\n * @param srcDir - The source directory for the files.\n * @returns A string representing the full content of the LLMs.txt file.\n */\nexport function generateLLMsFullTxt(\n\tpreparedFiles: PreparedFile[],\n\tsrcDir: VitePressConfig['vitepress']['srcDir'],\n) {\n\tconst llmsFullTxtContent = preparedFiles\n\t\t.map((file) => {\n\t\t\tconst relativePath = path.relative(srcDir, file.path)\n\t\t\tconst fileContent = matter(fs.readFileSync(file.path, 'utf-8'))\n\n\t\t\treturn matter.stringify(fileContent.content, {\n\t\t\t\turl: `/${stripExtPosix(relativePath)}.md`,\n\t\t\t})\n\t\t})\n\t\t.join('\\n---\\n\\n')\n\n\treturn llmsFullTxtContent\n}\n","/** Default template for the `llms.txt` file. */\nexport const defaultLLMsTxtTemplate = `\\\n# {title}\n\n{description}\n\n## Table of Contents\n\n{toc}`\n","import pc from 'picocolors'\n\n/**\n * Log prefix styling with the plugin name and separator.\n * @constant {string}\n */\nconst logPrefix = pc.blue('llmstxt') + pc.dim(' » ')\n\n/** Logger object with standardized logging methods. */\nconst log = {\n\t/**\n\t * Logs informational messages.\n\t * @param {string} message - The message to log.\n\t * @example\n\t * log.info('Starting process')\n\t */\n\tinfo: (message: string) => console.log(`${logPrefix}  ${message}`),\n\n\t/**\n\t * Logs success messages with a green checkmark.\n\t * @param {string} message - The success message to log.\n\t * @example\n\t * log.success('File copied successfully')\n\t */\n\tsuccess: (message: string) =>\n\t\tconsole.log(`${logPrefix}${pc.green('✓')} ${message}`),\n\n\t/**\n\t * Logs warning messages with a yellow warning symbol.\n\t * @param {string} message - The warning message to log.\n\t * @example\n\t * log.warn('No files found to process')\n\t */\n\twarn: (message: string) =>\n\t\tconsole.warn(`${logPrefix}${pc.yellow('⚠')} ${pc.yellow(message)}`),\n\n\t/**\n\t * Logs error messages with a red X symbol.\n\t * @param {string} message - The error message to log.\n\t * @example\n\t * log.error('Failed to copy file')\n\t */\n\terror: (message: string) =>\n\t\tconsole.error(`${logPrefix}${pc.red('✗')} ${pc.red(message)}`),\n}\n\nexport default log\n","{\n\t\"name\": \"vitepress-plugin-llms\",\n\t\"version\": \"0.0.7\",\n\t\"description\": \"A VitePress plugin for generating LLM-friendly documentation in lightweight Markdown format\",\n\t\"license\": \"MIT\",\n\t\"type\": \"module\",\n\t\"main\": \"dist/index.js\",\n\t\"funding\": \"https://github.com/okineadev/vitepress-plugin-llms?sponsor=1\",\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"git+https://github.com/okineadev/vitepress-plugin-llms.git\"\n\t},\n\t\"author\": {\n\t\t\"name\": \"Okinea Dev\",\n\t\t\"email\": \"hi@okinea.dev\",\n\t\t\"url\": \"https://github.com/okineadev\"\n\t},\n\t\"keywords\": [\"vitepress\", \"plugin\", \"llms\", \"documentation\", \"ai\"],\n\t\"scripts\": {\n\t\t\"lint\": \"biome check --fix\",\n\t\t\"format\": \"biome format --write\",\n\t\t\"test\": \"bun test\",\n\t\t\"preversion\": \"bun run format && git add .\",\n\t\t\"build\": \"tsup\",\n\t\t\"prepare\": \"husky\",\n\t\t\"docs:dev\": \"vitepress dev docs\",\n\t\t\"docs:build\": \"vitepress build docs\",\n\t\t\"docs:preview\": \"vitepress preview docs\"\n\t},\n\t\"dependencies\": {\n\t\t\"gray-matter\": \"^4.0.3\",\n\t\t\"markdown-title\": \"^1.0.2\",\n\t\t\"minimatch\": \"^10.0.1\",\n\t\t\"picocolors\": \"^1.1.1\"\n\t},\n\t\"devDependencies\": {\n\t\t\"@biomejs/biome\": \"1.9.4\",\n\t\t\"@types/node\": \"^22.13.10\",\n\t\t\"bun-types\": \"^1.2.5\",\n\t\t\"husky\": \"^9.1.7\",\n\t\t\"lint-staged\": \"^15.5.0\",\n\t\t\"tsup\": \"^8.4.0\",\n\t\t\"typescript\": \"^5.8.2\",\n\t\t\"vitepress\": \"^1.6.3\",\n\t\t\"vitepress-plugin-group-icons\": \"^1.3.7\"\n\t},\n\t\"trustedDependencies\": [\"@biomejs/biome\", \"esbuild\"],\n\t\"lint-staged\": {\n\t\t\"{src,tests}/**/*.ts\": \"bun test\",\n\t\t\"*\": \"bun run format --no-errors-on-unmatched\"\n\t}\n}\n"],"mappings":"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","names":["fs","path","pc","minimatch","fs","path","matter","markdownTitle","defaultLLMsTxtTemplate","splitDirAndFile","filepath","path","stripExt","dir","file","stripExtPosix","extractTitle","content","contentData","matter","markdownTitle","generateTOC","preparedFiles","srcDir","tableOfContent","relativePath","generateLLMsTxt","indexMd","llmsTxtTemplate","defaultLLMsTxtTemplate","indexMdFile","fs","llmsTxtContent","generateLLMsFullTxt","fileContent","pc","logPrefix","log","message","logger_default","matter","name","PLUGIN_NAME","name","llmstxt","userSettings","settings","defaultLLMsTxtTemplate","config","mdFiles","isSsrBuild","resolvedConfig","path","logger_default","pc","server","req","res","next","filePath","stripExt","content","fs","_","id","pattern","minimatch","outDir","mdFilesList","fileCount","preparedFiles","file","relativePath","targetPath","fileContent","matter","title","extractTitle","stripExtPosix","error","a","b","llmsTxtPath","llmsTxt","generateLLMsTxt","llmsFullTxtPath","llmsFullTxt","generateLLMsFullTxt"]}