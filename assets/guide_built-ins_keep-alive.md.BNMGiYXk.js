import{r as v,c as p,o as l,a,t as g,F,M as r,a7 as b,a8 as f,e as c,m as d,a9 as E,l as y,aa as B,b as i,q as u}from"./chunks/framework.CSxrXzdz.js";const A={style:{"margin-right":"20px"}},h={__name:"CompA",setup(t){const s=v(0);return(n,e)=>(l(),p(F,null,[e[1]||(e[1]=a("p",null,"Current component: A",-1)),a("span",A,"Count: "+g(s.value),1),a("button",{onClick:e[0]||(e[0]=o=>s.value++)},"+")],64))}},C={style:{"margin-right":"20px"}},k={__name:"CompB",setup(t){const s=v("");return(n,e)=>(l(),p(F,null,[e[1]||(e[1]=a("p",null,"Current component: B",-1)),a("span",C,"Message is: "+g(s.value),1),r(a("input",{"onUpdate:modelValue":e[0]||(e[0]=o=>s.value=o)},null,512),[[b,s.value]])],64))}},w={class:"demo"},m={__name:"SwitchComponent",props:{useKeepAlive:Boolean},setup(t){const s=f(h);return(n,e)=>(l(),p("div",w,[a("label",null,[r(a("input",{type:"radio","onUpdate:modelValue":e[0]||(e[0]=o=>s.value=o),value:h},null,512),[[E,s.value]]),e[2]||(e[2]=d(" A",-1))]),a("label",null,[r(a("input",{type:"radio","onUpdate:modelValue":e[1]||(e[1]=o=>s.value=o),value:k},null,512),[[E,s.value]]),e[3]||(e[3]=d(" B",-1))]),t.useKeepAlive?(l(),c(B,{key:0},[(l(),c(y(s.value)))],1024)):(l(),c(y(s.value),{key:1}))]))}},D=JSON.parse('{"title":"KeepAlive","description":"","frontmatter":{},"headers":[{"level":2,"title":"Basic Usage","slug":"basic-usage","link":"#basic-usage","children":[]},{"level":2,"title":"Include / Exclude","slug":"include-exclude","link":"#include-exclude","children":[]},{"level":2,"title":"Max Cached Instances","slug":"max-cached-instances","link":"#max-cached-instances","children":[]},{"level":2,"title":"Lifecycle of Cached Instance","slug":"lifecycle-of-cached-instance","link":"#lifecycle-of-cached-instance","children":[]}],"relativePath":"guide/built-ins/keep-alive.md","filePath":"guide/built-ins/keep-alive.md"}'),x={name:"guide/built-ins/keep-alive.md"},q=Object.assign(x,{setup(t){return(s,n)=>(l(),p("div",null,[n[0]||(n[0]=i('<h1 id="keepalive" tabindex="-1">KeepAlive <a class="header-anchor" href="#keepalive" aria-label="Permalink to &quot;KeepAlive {#keepalive}&quot;">​</a></h1><p><code>&lt;KeepAlive&gt;</code> is a built-in component that allows us to conditionally cache component instances when dynamically switching between multiple components.</p><h2 id="basic-usage" tabindex="-1">Basic Usage <a class="header-anchor" href="#basic-usage" aria-label="Permalink to &quot;Basic Usage {#basic-usage}&quot;">​</a></h2><p>In the Component Basics chapter, we introduced the syntax for <a href="/guide/essentials/component-basics.html#dynamic-components">Dynamic Components</a>, using the <code>&lt;component&gt;</code> special element:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">activeComponent</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>By default, an active component instance will be unmounted when switching away from it. This will cause any changed state it holds to be lost. When this component is displayed again, a new instance will be created with only the initial state.</p><p>In the example below, we have two stateful components - A contains a counter, while B contains a message synced with an input via <code>v-model</code>. Try updating the state of one of them, switch away, and then switch back to it:</p>',7)),u(m),n[1]||(n[1]=i(`<p>You&#39;ll notice that when switched back, the previous changed state would have been reset.</p><p>Creating fresh component instance on switch is normally useful behavior, but in this case, we&#39;d really like the two component instances to be preserved even when they are inactive. To solve this problem, we can wrap our dynamic component with the <code>&lt;KeepAlive&gt;</code> built-in component:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- Inactive components will be cached! --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">activeComponent</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>Now, the state will be persisted across component switches:</p>`,4)),u(m,{"use-KeepAlive":""}),n[2]||(n[2]=i(`<div class="composition-api"><p><a href="https://play.vuejs.org/#eNqtUsFOwzAM/RWrl4IGC+cqq2h3RFw495K12YhIk6hJi1DVf8dJSllBaAJxi+2XZz8/j0lhzHboeZIl1NadMA4sd73JKyVaozsHI9hnJqV+feJHmODY6RZS/JEuiL1uTTEXtiREnnINKFeAcgZUqtbKOqj7ruPKwe6s2VVguq4UJXEynAkDx1sjmeMYAdBGDFBLZu2uShre6ioJeaxIduAyp0KZ3oF7MxwRHWsEQmC4bXXDJWbmxpjLBiZ7DwptMUFyKCiJNP/BWUbO8gvnA+emkGKIgkKqRrRWfh+Z8MIWwpySpfbxn6wJKMGV4IuSs0UlN1HVJae7bxYvBuk+2IOIq7sLnph8P9u5DJv5VfpWWLaGqTzwZTCOM/M0IaMvBMihd04ruK+lqF/8Ajxms8EFbCiJxR8khsP6ncQosLWnWV6a/kUf2nqu75Fby04chA0iPftaYryhz6NBRLjdtajpHZTWPio=" target="_blank" rel="noreferrer">Try it in the Playground</a></p></div><div class="options-api"><p><a href="https://play.vuejs.org/#eNqtU8tugzAQ/JUVl7RKWveMXFTIseofcHHAiawasPxArRD/3rVNSEhbpVUrIWB3x7PM7jAkuVL3veNJmlBTaaFsVraiUZ22sO0alcNedw2s7kmIPHS1ABQLQDEBAMqWvwVQzffMSQuDz1aI6VreWpPCEBtsJppx4wE1s+zmNoIBNLdOt8cIjzut8XAKq3A0NAIY/QNveFEyi8DA8kZJZjlGALQWPVSSGfNYJjVvujIJeaxItuMyo6JVzoJ9VxwRmtUCIdDfNV3NJWam5j7HpPOY8BEYkwxySiLLP1AWkbK4oHzmXOVS9FFOSM3jhFR4WTNfRslcO54nSwJKcCD4RsnZmJJNFPXJEl8t88quOuc39fCrHalsGyWcnJL62apYNoq12UQ8DLEFjCMy+kKA7Jy1XQtPlRTVqx+Jx6zXOJI1JbH4jejg3T+KbswBzXnFlz9Tjes/V/3CjWEHDsL/OYNvdCE8Wu3kLUQEhy+ljh+brFFu" target="_blank" rel="noreferrer">Try it in the Playground</a></p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>When used in <a href="/guide/essentials/component-basics.html#in-dom-template-parsing-caveats">in-DOM templates</a>, it should be referenced as <code>&lt;keep-alive&gt;</code>.</p></div><h2 id="include-exclude" tabindex="-1">Include / Exclude <a class="header-anchor" href="#include-exclude" aria-label="Permalink to &quot;Include / Exclude {#include-exclude}&quot;">​</a></h2><p>By default, <code>&lt;KeepAlive&gt;</code> will cache any component instance inside. We can customize this behavior via the <code>include</code> and <code>exclude</code> props. Both props can be a comma-delimited string, a <code>RegExp</code>, or an array containing either types:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- comma-delimited string --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#B392F0;"> include</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;a,b&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">view</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- regex (use \`v-bind\`) --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">include</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;/</span><span style="color:#DBEDFF;">a</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">b</span><span style="color:#9ECBFF;">/&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">view</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- Array (use \`v-bind\`) --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">include</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">]</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">view</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>The match is checked against the component&#39;s <a href="/api/options-misc.html#name"><code>name</code></a> option, so components that need to be conditionally cached by <code>KeepAlive</code> must explicitly declare a <code>name</code> option.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Since version 3.2.34, a single-file component using <code>&lt;script setup&gt;</code> will automatically infer its <code>name</code> option based on the filename, removing the need to manually declare the name.</p></div><h2 id="max-cached-instances" tabindex="-1">Max Cached Instances <a class="header-anchor" href="#max-cached-instances" aria-label="Permalink to &quot;Max Cached Instances {#max-cached-instances}&quot;">​</a></h2><p>We can limit the maximum number of component instances that can be cached via the <code>max</code> prop. When <code>max</code> is specified, <code>&lt;KeepAlive&gt;</code> behaves like an <a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)" target="_blank" rel="noreferrer">LRU cache</a>: if the number of cached instances is about to exceed the specified max count, the least recently accessed cached instance will be destroyed to make room for the new one.</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">10</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">activeComponent</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="lifecycle-of-cached-instance" tabindex="-1">Lifecycle of Cached Instance <a class="header-anchor" href="#lifecycle-of-cached-instance" aria-label="Permalink to &quot;Lifecycle of Cached Instance {#lifecycle-of-cached-instance}&quot;">​</a></h2><p>When a component instance is removed from the DOM but is part of a component tree cached by <code>&lt;KeepAlive&gt;</code>, it goes into a <strong>deactivated</strong> state instead of being unmounted. When a component instance is inserted into the DOM as part of a cached tree, it is <strong>activated</strong>.</p><div class="composition-api"><p>A kept-alive component can register lifecycle hooks for these two states using <a href="/api/composition-api-lifecycle.html#onactivated"><code>onActivated()</code></a> and <a href="/api/composition-api-lifecycle.html#ondeactivated"><code>onDeactivated()</code></a>:</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { onActivated, onDeactivated } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">onActivated</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // called on initial mount</span></span>
<span class="line"><span style="color:#6A737D;">  // and every time it is re-inserted from the cache</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">onDeactivated</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // called when removed from the DOM into the cache</span></span>
<span class="line"><span style="color:#6A737D;">  // and also when unmounted</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></div><div class="options-api"><p>A kept-alive component can register lifecycle hooks for these two states using <a href="/api/options-lifecycle.html#activated"><code>activated</code></a> and <a href="/api/options-lifecycle.html#deactivated"><code>deactivated</code></a> hooks:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  activated</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">    // called on initial mount</span></span>
<span class="line"><span style="color:#6A737D;">    // and every time it is re-inserted from the cache</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#B392F0;">  deactivated</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">    // called when removed from the DOM into the cache</span></span>
<span class="line"><span style="color:#6A737D;">    // and also when unmounted</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><p>Note that:</p><ul><li><p><span class="composition-api"><code>onActivated</code></span><span class="options-api"><code>activated</code></span> is also called on mount, and <span class="composition-api"><code>onDeactivated</code></span><span class="options-api"><code>deactivated</code></span> on unmount.</p></li><li><p>Both hooks work for not only the root component cached by <code>&lt;KeepAlive&gt;</code>, but also the descendant components in the cached tree.</p></li></ul><hr><p><strong>Related</strong></p><ul><li><a href="/api/built-in-components.html#keepalive"><code>&lt;KeepAlive&gt;</code> API reference</a></li></ul>`,20))]))}});export{D as __pageData,q as default};
